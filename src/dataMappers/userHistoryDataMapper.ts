import {
    ChipStatusAtmType,
    MessageBodyItem,
    MessageBodyItemType,
    NavigationPanel,
    NavigationPanelMlc,
    PublicServiceContextMenuType,
    StubMessageMlc,
} from '@diia-inhouse/types'

import { StatusHistoryItem, UserSharingHistoryItemModel } from '@interfaces/models/userSharingHistoryItem'
import { UserSigningHistoryItemModel } from '@interfaces/models/userSigningHistoryItem'
import {
    GetHistoryItemBodyPayload,
    HistoryResponseByCodeStubMessage,
    UserHistoryCode,
    UserHistoryItemStatus,
} from '@interfaces/services/userHistory'

export default class UserHistoryDataMapper {
    readonly failHistoryItemThreshold: number = 1000 * 60 * 60

    readonly dateFormatV1: string = 'DD.MM.YYYY / HH:mm'

    readonly dateFormat: string = 'dd.MM.yyyy HH:mm'

    private readonly stubMessageByActionV1: Record<UserHistoryCode, HistoryResponseByCodeStubMessage> = {
        [UserHistoryCode.Authorization]: {
            icon: 'ü§∑‚Äç‚ôÇÔ∏è',
            text: '–í–∏ —â–µ –Ω–µ –∑–¥—ñ–π—Å–Ω—é–≤–∞–ª–∏ \n–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –î—ñ—è.–ü—ñ–¥–ø–∏—Å.',
        },
        [UserHistoryCode.Signing]: {
            icon: 'ü§∑‚Äç‚ôÇÔ∏è',
            text: '–í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ \n–¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –î—ñ—ó.',
        },
        [UserHistoryCode.Sharing]: {
            icon: 'üìÑ',
            text: '–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ–ø—ñ—ó –≤–∞—à–∏—Ö —Ü–∏—Ñ—Ä–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.',
        },
    }

    private readonly stubMessageByAction: Record<UserHistoryCode, StubMessageMlc> = {
        [UserHistoryCode.Authorization]: {
            icon: 'ü§∑‚Äç‚ôÇÔ∏è',
            title: '–í–∏ —â–µ –Ω–µ –∑–¥—ñ–π—Å–Ω—é–≤–∞–ª–∏ \n–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –î—ñ—è.–ü—ñ–¥–ø–∏—Å.',
            parameters: [],
        },
        [UserHistoryCode.Signing]: {
            icon: 'ü§∑‚Äç‚ôÇÔ∏è',
            title: '–í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ \n–¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –î—ñ—ó.',
            parameters: [],
        },
        [UserHistoryCode.Sharing]: {
            icon: 'üìÑ',
            title: '–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ–ø—ñ—ó –≤–∞—à–∏—Ö —Ü–∏—Ñ—Ä–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.',
            parameters: [],
        },
    }

    private readonly historyItemTitleByAction: Record<UserHistoryCode, string> = {
        [UserHistoryCode.Authorization]: '–ó–∞–ø–∏—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑ –î—ñ—è.–ü—ñ–¥–ø–∏—Å',
        [UserHistoryCode.Signing]: '–ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è —Ü–∏—Ñ—Ä–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤',
        [UserHistoryCode.Sharing]: '–ó–∞–ø–∏—Ç –Ω–∞ –∫–æ–ø—ñ—ó —Ü–∏—Ñ—Ä–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤',
    }

    private readonly historyItemStatusMessageIconByStatus: Record<UserHistoryItemStatus, string> = {
        [UserHistoryItemStatus.Done]: '‚úÖ',
        [UserHistoryItemStatus.Refuse]: 'üö´',
        [UserHistoryItemStatus.Processing]: '‚è≥',
    }

    private readonly historyItemStatusNameByActionAndStatus: Record<UserHistoryCode, Record<UserHistoryItemStatus, string>> = {
        [UserHistoryCode.Authorization]: {
            [UserHistoryItemStatus.Done]: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ',
            [UserHistoryItemStatus.Refuse]: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ',
            [UserHistoryItemStatus.Processing]: '–ê–≤—Ç–æ—Ä–∏–∑—É—î–º–æ',
        },
        [UserHistoryCode.Signing]: {
            [UserHistoryItemStatus.Done]: '–ü—ñ–¥–ø–∏—Å–∞–Ω–æ',
            [UserHistoryItemStatus.Refuse]: '–ù–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ',
            [UserHistoryItemStatus.Processing]: '–ü—ñ–¥–ø–∏—Å—É—î–º–æ',
        },
        [UserHistoryCode.Sharing]: {
            [UserHistoryItemStatus.Done]: '–í–∏–∫–æ–Ω–∞–Ω–æ',
            [UserHistoryItemStatus.Refuse]: '–í—ñ–¥–º–æ–≤–ª–µ–Ω–æ',
            [UserHistoryItemStatus.Processing]: '–í –æ–±—Ä–æ–±—Ü—ñ',
        },
    }

    private readonly historyStatusChipTypeByStatus: Record<UserHistoryItemStatus, ChipStatusAtmType> = {
        [UserHistoryItemStatus.Done]: ChipStatusAtmType.success,
        [UserHistoryItemStatus.Refuse]: ChipStatusAtmType.neutral,
        [UserHistoryItemStatus.Processing]: ChipStatusAtmType.pending,
    }

    getStatus(model: UserSharingHistoryItemModel | UserSigningHistoryItemModel): UserHistoryItemStatus {
        const { status, statusHistory } = model
        if (status !== UserHistoryItemStatus.Processing) {
            return status
        }

        const { date: statusDate } = <StatusHistoryItem>statusHistory.at(-1)

        const threshold: number = statusDate.getTime() + this.failHistoryItemThreshold
        const now: number = Date.now()
        const responseStatus: UserHistoryItemStatus = now > threshold ? UserHistoryItemStatus.Refuse : status

        return responseStatus
    }

    getHistoryScreenNavigationPanel(): NavigationPanel {
        return {
            header: '–î—ñ—è.–ü—ñ–¥–ø–∏—Å',
            contextMenu: [
                {
                    type: PublicServiceContextMenuType.faqCategory,
                    code: 'diiaId',
                    name: '–ü–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                },
                {
                    type: PublicServiceContextMenuType.supportServiceScreen,
                    name: '–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏',
                },
            ],
        }
    }

    getHistoryScreenNavigationPanelMlc(label?: string): NavigationPanelMlc {
        return {
            label: label || '–Ü—Å—Ç–æ—Ä—ñ—è –ø—ñ–¥–ø–∏—Å–∞–Ω—å',
            ellipseMenu: [
                {
                    type: PublicServiceContextMenuType.faqCategory,
                    name: '–ü–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                    code: 'diiaId',
                },
                {
                    type: PublicServiceContextMenuType.supportServiceScreen,
                    name: '–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏',
                },
            ],
        }
    }

    getStubMessageByActionV1(action: UserHistoryCode): HistoryResponseByCodeStubMessage {
        return this.stubMessageByActionV1[action]
    }

    getStubMessageByAction(action: UserHistoryCode): StubMessageMlc {
        return this.stubMessageByAction[action]
    }

    getHistoryItemTitleByAction(action: UserHistoryCode): string {
        return this.historyItemTitleByAction[action]
    }

    getHistoryItemStatusMessageIconByStatus(status: UserHistoryItemStatus): string {
        return this.historyItemStatusMessageIconByStatus[status]
    }

    getHistoryItemStatusNameByActionAndStatus(action: UserHistoryCode, status: UserHistoryItemStatus): string {
        return this.historyItemStatusNameByActionAndStatus[action][status]
    }

    getHistoryStatusChipTypeByStatus(status: UserHistoryItemStatus): ChipStatusAtmType {
        return this.historyStatusChipTypeByStatus[status]
    }

    getHistoryItemBodyByAction(action: UserHistoryCode, payload: GetHistoryItemBodyPayload): MessageBodyItem[] {
        const { platformType, platformVersion, documents } = payload
        switch (action) {
            case UserHistoryCode.Authorization: {
                return [
                    {
                        type: MessageBodyItemType.text,
                        data: {
                            text: `–ü—Ä–∏—Å—Ç—Ä—ñ–π, –∑ —è–∫–æ–≥–æ –∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é: \n${platformType} ${platformVersion}`,
                            parameters: [],
                        },
                    },
                ]
            }
            case UserHistoryCode.Signing: {
                let text = `–ë—É–ª–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:\n‚Ä¢ ${documents.join('\n‚Ä¢ ')}`

                if (platformType && platformVersion) {
                    text += `\n\n–ü—Ä–∏—Å—Ç—Ä—ñ–π, –∑ —è–∫–æ–≥–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ: \n${platformType} ${platformVersion}`
                }

                return [
                    {
                        type: MessageBodyItemType.text,
                        data: {
                            text,
                            parameters: [],
                        },
                    },
                ]
            }
            case UserHistoryCode.Sharing: {
                return []
            }
            default: {
                const unhandledAction: never = action

                throw new TypeError(`Unhandled history signing code action type: ${unhandledAction}`)
            }
        }
    }
}
